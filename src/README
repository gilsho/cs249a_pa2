user: gilsho
user: rmferrer

ENGINE LAYER
===============
Our enginer design consists of the values types and entity types described 
below. The main object in our engine strucutre is the Network class, which
contains a vector of locations and a vector of segments. Locations and Segments
are added and removed from the system via the network interface. The Network
class issues notification when new locations and/or segments are added and
deleted, to which the Stats class subscribes to in order to keep track of
the statistics. Each location maintains a list of all the segments for which it
is the source, and all segments maintain a reference to their source location
and the return segment to which they are paired with. The location and segment
classes are responsible for maintainining the invariants in the system, namely 
that once a segment is deleted from a location, the segment not longer lists 
that location as its source, or when one segment (call it segment A) changes 
return segments, it notifies the old segment that was listed as its return 
segment (call it segmetn B) that A is no longer its (B's) return segment true.
The Segment class also issues notifications when the expedite attribute changes.
The same Stats class maintains a Reactor for every segment and bounces back
the notifications to itself.  Extra caution is taken care when maintaining
the invariants, for example when setting segment's source to NULL. Such as 
operation calls the segment's source segmentDel() method, which might in turn
call sourceIs() on the segment being removed and result in an infinite
recursion. We solved this problem by first copying the old valus to a temporary
container, setting the current value to NULL, and then call the sourceIs 
function on the location. This ensures the loop will stop. Another important
point to mention, is that the Connectivity object, which issues the explore
and connect queries, returns its result to the Rep layer in form of a 
PathList object, which is a collection of Path objects.



                                               +-----------------------------+
                                               |            Stats            |
                +-----------------------+      |+-------+ +-------+ +-------+|
+------------+  |                       |<------+Reactor| |Reactor| |Reactor||
|Connectivity|->|      Network          |      |+-------+ +--+----+ +--+----+|
+------------+  |                       |      +-------------|---------|-----+
                +----+----------+------++                    |         |
                 |   |          |      |                     |         |
                 v   |          v      |                     |         |
          +--------+ |      +--------+ |                     |         |
          |Location| |      |Location| |                     |         |
          ++------++ |      +-------++ |                     |         |
                 ^|  |             ^|  |                     |         |
                 ||  |             ||  |                     |         |
                 |v  v             |v  v                     |         |
                +-------+        +--------+                  |         |
                |Segment+------->|Segment |                  |         |
                |       |<-------+        |<-----------------+         |
                +-------+        +--------+                            |
                     ^                                                 |
                     |                                                 |
                     |                                                 |
                     +-------------------------------------------------+

Value Types
-----------
Factor
DifficultyLevel
Hours
Dollars
DollarsPerMile
MilesPerHour
PackageCapacity


Entity Types
------------
Network 
Location
 |- Customer
 |- Port
 |- Terminal
  		|- TruckTerminal
  		|- BoatTerminal
  		|- PlaneTerminal

Segment
 |- BoatSegment
 |- PlaneSegment
 |- TruckSegment

Stats
 |- Stats Config

Connectivity
Path 
PathList

Named Descriptions
-------------------
FleetDesc
 |-BoatFleetDesc
 |-PlaneFleetDesc
 |-TruckFleetDesc


REP LAYER
==========
The Rep layer consists of Instance objects. Each Instance roughly corresponds 
to one object in the engine layer. The Segment and Location Instances also
keep a smart pointer to the "Network" engine object, to ensure it does not go 
out of scope while the instance is alive. Instances are implemented via the
InstanceImpl class, which introduces a "status" attribute. The status attribute
is a mechanism to allow for deleting Instances while maintaing a valid pointer 
to an Instance object. Once a status is set to "InstanceDeleted", the underlying
engine object or objects are safely removed, and all subsequent reads or writes
to the object will do nothgint and return the empty string. Every instance
object, when it does out of scope, sets its status to "InstanceDeleted" to 
ensure that the Enginer object for which it is a proxy it is removed from the 
network.

TESTING
=======
We constructed an elaborate network in test1.cpp to test the functionality of 
our system. We also wrote test cases using the gtest framework which are present
in the "EngineTest.cpp" file (which we included in the src directory for the 
submission)





